# enable to SET_KINEMATIC_POSITION for Z hop
[force_move]
enable_force_move: True

[gcode_macro PROBE_VARIABLES]
variable_probe_attached: False
variable_probe_state: False
variable_probe_lock: False
variable_z_endstop_x: 0
variable_z_endstop_y: 0
gcode:


[gcode_macro Homing_Variables]
default_parameter_reset: 0
gcode:
    {% set R  = params.RESET %}

    {% if R %}
        SET_GCODE_VARIABLE MACRO=PROBE_VARIABLES VARIABLE=probe_lock VALUE={ False }
   {% endif %}

# Attach probe and lock it
[gcode_macro Attach_Probe_Lock]
gcode:
    Attach_Probe
    SET_GCODE_VARIABLE MACRO=PROBE_VARIABLES VARIABLE=probe_lock VALUE={ True }


# Dock probe and lock it
[gcode_macro Dock_Probe_Unlock]
gcode:
    SET_GCODE_VARIABLE MACRO=PROBE_VARIABLES VARIABLE=probe_lock VALUE={ False }
    Dock_Probe

# Unlock Probe
[gcode_macro Probe_Unlock]
gcode:
    SET_GCODE_VARIABLE MACRO=PROBE_VARIABLES VARIABLE=probe_lock VALUE={ False }

# Lock Probe
[gcode_macro Probe_Lock]
gcode:
    SET_GCODE_VARIABLE MACRO=PROBE_VARIABLES VARIABLE=probe_lock VALUE={ True }
# Attach Probe Routine
[gcode_macro Attach_Probe]
gcode:
    # Get probe attach status
    {% set P = printer["gcode_macro PROBE_VARIABLES"].probe_attached %}
    {% set L = printer["gcode_macro PROBE_VARIABLES"].probe_lock %}
    {% set V = printer["gcode_macro KLICKY_USER_VARIABLES"].verbose %}
    # Get Docking location
    {% set Dx = printer["gcode_macro KLICKY_USER_VARIABLES"].docklocation_x %}
    {% set Dy = printer["gcode_macro KLICKY_USER_VARIABLES"].docklocation_y %}
    {% set Dz = printer["gcode_macro KLICKY_USER_VARIABLES"].docklocation_z %}
    {% set Da = printer["gcode_macro KLICKY_USER_VARIABLES"].dockarmslenght %}
    # Safe Z for travel
    {% set Hzh = printer["gcode_macro KLICKY_USER_VARIABLES"].home_z_height|float %}
    #Set speed
    {% set St = printer["gcode_macro KLICKY_USER_VARIABLES"].travel_speed * 60    %}

    #prior to saving actual position, check if its necessary to move to a safe Z
    #that has enought overhead for the attached probe
    {% if (printer.toolhead.position.z < Hzh) %}
        G1 Z{Hzh} F1200
    {% endif %}
    M400 # mandatory to save the new safe position
    #allows the docking position to be independent of the Z offset, necessary for bed mounted probes
    SAVE_GCODE_STATE name=_attachProbe
    SET_GCODE_OFFSET Z=0

    # if x and y are not homed
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }

    # If probe not attached and locked
    {% elif not P and not L %}
        {% if V %}
            { action_respond_info("Attaching Probe") }
        {% endif %}
        G90

        {% if (not 'z' in printer.toolhead.homed_axes) %}
            {% if V %}
                { action_respond_info("Resetting Z position to zero") }
            {% endif %}
            SET_KINEMATIC_POSITION Z=0
        {% endif %}

        {% if (printer.toolhead.position.z < Hzh) %}
            G1 Z{Hzh} F1200
        {% endif %}

        Umbilical_Path

        # Probe entry location
        G1 X{Dx} Y{Dy|int - Da|int} Z{Hzh} F{St}
        #lower to Z dock
        G1 Z{Dz} F600
        # pickup from Probe location
        G1 X{Dx} Y{Dy} F1800
        # Probe entry location
        G1 X{Dx} Y{Dy|int - Da|int} F6000
        #Go to Z safe distance
        G1 Z{Hzh} F600
        Park_Toolhead

        CheckProbe action=attach

    {% elif L %}
        {% if V %}
            { action_respond_info("Probe locked!") }
        {% endif %}

        # Probe attached, do nothing
        CheckProbe action=query

    {% else %}
        {% if V %}
            { action_respond_info("Probe already attached!") }
        {% endif %}

        # Probe attached, do nothing
        CheckProbe action=query

    {% endif %}
    #reverts to the original Z offset
    RESTORE_GCODE_STATE name=_attachProbe


# Dock Probe Routine
[gcode_macro Dock_Probe]
gcode:
    # Get probe attach status
    {% set P = printer["gcode_macro PROBE_VARIABLES"].probe_attached %}
    {% set L = printer["gcode_macro PROBE_VARIABLES"].probe_lock %}
    {% set V = printer["gcode_macro KLICKY_USER_VARIABLES"].verbose %}
    # Get Docking location
    {% set Dx = printer["gcode_macro KLICKY_USER_VARIABLES"].docklocation_x %}
    {% set Dy = printer["gcode_macro KLICKY_USER_VARIABLES"].docklocation_y %}
    {% set Dz = printer["gcode_macro KLICKY_USER_VARIABLES"].docklocation_z %}
    {% set Da = printer["gcode_macro KLICKY_USER_VARIABLES"].dockarmslenght %}
    # Safe Z for travel
    {% set Hzh = printer["gcode_macro KLICKY_USER_VARIABLES"].home_z_height|float %}
    # Set speed
    {% set St = printer["gcode_macro KLICKY_USER_VARIABLES"].travel_speed * 60    %}
    {% set Sd = printer["gcode_macro KLICKY_USER_VARIABLES"].dock_speed * 60    %}
    {% set Sr = printer["gcode_macro KLICKY_USER_VARIABLES"].release_speed * 60    %}
    {% set Sz = printer["gcode_macro KLICKY_USER_VARIABLES"].z_drop_speed * 60    %}

    M400 # mandatory to save the new safe position
    #allows the docking position to be independent of the Z offset, necessary for bed mounted probes
    SAVE_GCODE_STATE name=_dockProbe
    SET_GCODE_OFFSET Z=0

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }

    # If probe not attached and not locked
    {% elif P and not L %}
        {% if V %}
            { action_respond_info("Docking Probe") }
        {% endif %}
        G90

        {% if (printer.toolhead.position.z < Hzh) %}
            G1 Z{Hzh} F{Sz}
        {% endif %}

        Umbilical_Path

        # Probe entry location
        G1 X{Dx} Y{Dy|int - Da|int} Z{Hzh} F{St}
        #lower to Z dock
        G1 Z{Dz} F{Sz}
        # Drop Probe to Probe location
        G1 X{Dx} Y{Dy} F{Sd}
        # Probe decoupling
        G1 X{Dx|int + 40} Y{Dy} F{Sr}
        #Go to Z safe distance
        G1 X{Dx|int + 40} Y{Dy|int - 5} Z{Hzh} F{St}

        Park_Toolhead

        CheckProbe action=dock

    {% elif L %}
        {% if V %}
            { action_respond_info("Probe locked!") }
        {% endif %}

        # Probe docked, do nothing
        CheckProbe action=query

    {% else %}
        {% if V %}
            { action_respond_info("Probe already docked!") }
        {% endif %}

        # Probe docked, do nothing
        CheckProbe action=query

    {% endif %}
    #reverts to the original Z offset
    RESTORE_GCODE_STATE name=_dockProbe



# Quad Gantry Level
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    {% set V = printer["gcode_macro KLICKY_USER_VARIABLES"].verbose %}
    {% if V %}
        { action_respond_info("QG Level") }
    {% endif %}

    CheckProbe action=query
    Attach_Probe

    _QUAD_GANTRY_LEVEL {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
            endfor %}
    Dock_Probe


# Bed Mesh Calibrate
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set V = printer["gcode_macro KLICKY_USER_VARIABLES"].verbose %}
    {% if V %}
        { action_respond_info("Bed Mesh Calibrate") }
    {% endif %}

    CheckProbe action=query
    Attach_Probe

    _BED_MESH_CALIBRATE {% for p in params
           %}{'%s=%s ' % (p, params[p])}{%
          endfor %}

    Dock_Probe


# Probe Calibrate
[gcode_macro PROBE_CALIBRATE]
rename_existing: _PROBE_CALIBRATE
gcode:
    {% set Hzh = printer["gcode_macro KLICKY_USER_VARIABLES"].home_z_height|float %}
    {% set Sz = printer["gcode_macro KLICKY_USER_VARIABLES"].z_drop_speed * 60 %}
    {% set St = printer["gcode_macro KLICKY_USER_VARIABLES"].travel_speed %}

    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    G1 Z{Hzh} F{Sz}
    M400 # mandatory to save the new safe position
    SAVE_GCODE_STATE NAME=_original_nozzle_location
    
    CheckProbe action=query
    Attach_Probe

    # LIAM #Restore nozzle location to probe the right place
    #RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}

    _PROBE_CALIBRATE {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

	#LAIM #store current nozzle location
	#SAVE_GCODE_STATE NAME=_original_nozzle_location  
    Dock_Probe
	
    # Restore nozzle location again at the end
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}


# Probe Accuracy
[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
gcode:
    {% set Hzh = printer["gcode_macro KLICKY_USER_VARIABLES"].home_z_height|float %}
    {% set Sz = printer["gcode_macro KLICKY_USER_VARIABLES"].z_drop_speed * 60 %}
    {% set St = printer["gcode_macro KLICKY_USER_VARIABLES"].travel_speed %}

    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    G1 Z{Hzh} F{Sz}
    M400 # mandatory to save the new safe position
    SAVE_GCODE_STATE NAME=_original_nozzle_location

    CheckProbe action=query
    Attach_Probe

    #Restore nozzle location to probe the right place
    #RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}

    _PROBE_ACCURACY {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

	#store current nozzle location
	# SAVE_GCODE_STATE NAME=_original_nozzle_location 
	
	Dock_Probe
	
    # Restore nozzle location again at the end
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}


# umbilical path setup
[gcode_macro Umbilical_Path]
gcode:
    {% set Ux = printer["gcode_macro KLICKY_USER_VARIABLES"].umbilical_x %}
    {% set Uy = printer["gcode_macro KLICKY_USER_VARIABLES"].umbilical_y %}
    {% set U = printer["gcode_macro KLICKY_USER_VARIABLES"].umbilical    %}
    {% set Hzh = printer["gcode_macro KLICKY_USER_VARIABLES"].home_z_height|float %}
    {% set St = printer["gcode_macro KLICKY_USER_VARIABLES"].travel_speed * 60    %}

    {% if U %}
        # Used to give the umbilical a better path to follow and coil properly if dock is tight in space
        G1 X{Ux} Y{Uy} Z{Hzh} F{St}
    {% endif %}


# Home Z Routine
[gcode_macro Home_Z]
gcode:
    {% set Zx = printer["gcode_macro PROBE_VARIABLES"].z_endstop_x         %}
    {% set Zy = printer["gcode_macro PROBE_VARIABLES"].z_endstop_y         %}
    {% set Hzh = printer["gcode_macro KLICKY_USER_VARIABLES"].home_z_height|float %}
    {% set St = printer["gcode_macro KLICKY_USER_VARIABLES"].travel_speed * 60    %}
    {% set Sz = printer["gcode_macro KLICKY_USER_VARIABLES"].z_drop_speed * 60    %}

    # if x and y are not homed yet, raise error
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }

    {% else %}
        {% if (not 'z' in printer.toolhead.homed_axes) %}
            {% if V %}
                { action_respond_info("Resetting Z position to zero") }
            {% endif %}
            SET_KINEMATIC_POSITION Z=0
        {% endif %}

        # move tool to safe homing position and home Z axis
        # location of z endstop
        G1 X{Zx} Y{Zy} Z{Hzh} F{St}
        G28 Z0
        G1 Z{Hzh} F{Sz}

    {% endif %}


# check to see if probe is where it is supposed to be after
# attaching/docking maneuver and set homing error or shutdown
[gcode_macro CheckProbe]
variable_probe_state:           0
default_parameter_action:
gcode:
    Query_Probe
    SetProbeState action={ ACTION }


# due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
[gcode_macro SetProbeState]
default_parameter_action:
gcode:
    {% set P = printer.probe.last_query %}
    {% set V = printer["gcode_macro KLICKY_USER_VARIABLES"].verbose %}

    # If triggered (true), probe not attached
    {% if P %}
        SET_GCODE_VARIABLE MACRO=PROBE_VARIABLES VARIABLE=probe_attached VALUE={ False }

    # If not triggered (false), probe attached
    {% else %}
        SET_GCODE_VARIABLE MACRO=PROBE_VARIABLES VARIABLE=probe_attached VALUE={ True }
    {% endif %}

    {% if params.ACTION == 'query' %}
          SET_GCODE_VARIABLE MACRO=PROBE_VARIABLES VARIABLE=probe_state VALUE={ P }
    {% endif %}

    # if probe fails to attach/detach
    # if not docked
    {% if (not P and params.ACTION == 'dock') %}
        { action_raise_error("Probe dock failed!") }
    {% endif %}

    # if not attached
    {% if P and params.ACTION == 'attach' %}
        { action_raise_error("Probe attach failed!") }
    {% endif %}


# Park Toolhead Routine
[gcode_macro Park_Toolhead]
gcode:
    {% set P = printer["gcode_macro KLICKY_USER_VARIABLES"].park_toolhead %}
    {% set Px = printer["gcode_macro KLICKY_USER_VARIABLES"].parkposition_x %}
    {% set Py = printer["gcode_macro KLICKY_USER_VARIABLES"].parkposition_y %}
    {% set Pz = printer["gcode_macro KLICKY_USER_VARIABLES"].parkposition_z %}
    {% set St = printer["gcode_macro KLICKY_USER_VARIABLES"].travel_speed * 60 %}
    {% set V = printer["gcode_macro KLICKY_USER_VARIABLES"].verbose %}

    {% if (P and 'xyz' in printer.toolhead.homed_axes) %}
        {% if V %}
            { action_respond_info("Parking Toolhead") }
        {% endif %}
        G90
        G1 X{Px} Y{Py} Z{Pz} F{St}
    {% endif %}